# -*- coding: utf-8 -*-
# Generated by Django 1.11.28 on 2020-03-25 07:33

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import laboratory.validators
import location_field.models.plain
try:
    import mptt.fields as mpttfields
except:
    mpttfields = None
from ._migrations_run_python_code import create_groups, load_group_perms

# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# laboratory.migrations.0023_auto_20170504_1649
# laboratory.migrations.0034_group_perms



class Migration(migrations.Migration):

    replaces = [('laboratory', '0001_initial'), ('laboratory', '0002_furniture_dataconfig'), ('laboratory', '0003_auto_20160809_1633'), ('laboratory', '0004_auto_20160826_1610'), ('laboratory', '0005_auto_20160907_1509'), ('laboratory', '0006_shelf_name'), ('laboratory', '0007_auto_20161210_1716'), ('laboratory', '0008_auto_20161212_0922'), ('laboratory', '0009_auto_20161212_0939'), ('laboratory', '0010_auto_20161212_0940'), ('laboratory', '0011_auto_20161212_0945'), ('laboratory', '0012_shelfobject_limit_quantity'), ('laboratory', '0005_auto_20160902_2040'), ('laboratory', '0007_merge_20161117_2025'), ('laboratory', '0013_merge_20161212_1640'), ('laboratory', '0014_laboratory'), ('laboratory', '0015_laboratory_related_labs'), ('laboratory', '0013_merge_20161214_0942'), ('laboratory', '0016_merge_20161222_1622'), ('laboratory', '0017_auto_20161222_1626'), ('laboratory', '0018_auto_20161223_1358'), ('laboratory', '0019_feedbackentry'), ('laboratory', '0020_auto_20170116_1147'), ('laboratory', '0021_object_imdg_code'), ('laboratory', '0022_auto_20170328_0932'), ('laboratory', '0023_auto_20170504_1649'), ('laboratory', '0024_laboratory_students'), ('laboratory', '0025_clinventory'), ('laboratory', '0026_auto_20170505_1359'), ('laboratory', '0027_auto_20170505_1400'), ('laboratory', '0028_auto_20170505_1400'), ('laboratory', '0029_auto_20170505_1401'), ('laboratory', '0030_auto_20170505_1404'), ('laboratory', '0025_solution'), ('laboratory', '0026_auto_20170508_1044'), ('laboratory', '0027_solution_name'), ('laboratory', '0031_merge_20170511_1217'), ('laboratory', '0032_auto_20180216_1502'), ('laboratory', '0033_auto_20180306_1643'), ('laboratory', '0034_group_perms'), ('laboratory', '0035_auto_20180621_0020'), ('laboratory', '0036_delete_feedbackentry'), ('laboratory', '0037_auto_20180630_1727'), ('laboratory', '0038_auto_20180630_1835'), ('laboratory', '0039_auto_20180630_1924'), ('laboratory', '0040_auto_20180801_2050'), ('laboratory', '0041_auto_20190423_1611'), ('laboratory', '0042_auto_20200302_2337'), ('laboratory', '0043_auto_20200303_1153'), ('laboratory', '0044_auto_20200303_1251'), ('laboratory', '0042_auto_20200118_0034'), ('laboratory', '0045_merge_20200320_1344'), ('laboratory', '0046_auto_20200320_1838')]

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('sga', '0018_auto_20190423_1611'),
    ]

    operations = [
        migrations.CreateModel(
            name='Furniture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('type', models.CharField(choices=[('F', 'Furniture'), ('D', 'Drawer')], max_length=2, verbose_name='Type')),
            ],
            options={
                'verbose_name': 'Piece of furniture',
                'verbose_name_plural': 'Furniture',
            },
        ),
        migrations.CreateModel(
            name='LaboratoryRoom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Laboratory Room',
                'verbose_name_plural': 'Laboratory Rooms',
            },
        ),
        migrations.CreateModel(
            name='Object',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('0', 'Reactive'), ('1', 'Material'), ('2', 'Equipment')], max_length=2, verbose_name='Type')),
                ('code', models.CharField(max_length=255, verbose_name='Code')),
                ('description', models.TextField(verbose_name='Description')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Object',
                'verbose_name_plural': 'Objects',
            },
        ),
        migrations.CreateModel(
            name='ObjectFeatures',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('0', 'General use'), ('1', 'Security equipment'), ('2', 'Analytic Chemistry'), ('3', 'Organic Chemistry'), ('4', 'Physical Chemistry'), ('5', 'Chemical and Biological process'), ('6', 'Industrial Biotechnology'), ('7', 'Biochemistry'), ('8', 'Water Chemistry'), ('9', 'Other')], max_length=2, unique=True, verbose_name='Name')),
                ('description', models.TextField(verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Object feature',
                'verbose_name_plural': 'Object features',
            },
        ),
        migrations.CreateModel(
            name='Shelf',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('C', 'Space'), ('D', 'Drawer')], max_length=2, verbose_name='Type')),
                ('container_shelf', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='laboratory.Shelf')),
                ('furniture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='laboratory.Furniture')),
                ('name', models.CharField(default='nd', max_length=15)),
            ],
            options={
                'verbose_name': 'Shelf',
                'verbose_name_plural': 'Shelves',
            },
        ),
        migrations.CreateModel(
            name='ShelfObject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.FloatField(verbose_name='Material quantity')),
                ('measurement_unit', models.CharField(choices=[('0', 'Meters'), ('1', 'Milimeters'), ('2', 'Centimeters'), ('3', 'Liters'), ('4', 'Mililiters'), ('5', 'Unit')], max_length=2, verbose_name='Measurement unit')),
                ('object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='laboratory.Object')),
                ('shelf', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='laboratory.Shelf')),
                ('limit_quantity', models.FloatField(default=0.0, verbose_name='Limit material quantity')),
            ],
            options={
                'verbose_name': 'Shelf object',
                'verbose_name_plural': 'Shelf objects',
            },
        ),
        migrations.AddField(
            model_name='object',
            name='features',
            field=models.ManyToManyField(to='laboratory.ObjectFeatures'),
        ),
        migrations.AddField(
            model_name='furniture',
            name='labroom',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='laboratory.LaboratoryRoom'),
        ),
        migrations.AddField(
            model_name='furniture',
            name='dataconfig',
            field=models.TextField(default='', verbose_name='Data configuration'),
            preserve_default=False,
        ),
        migrations.AlterModelOptions(
            name='furniture',
            options={'ordering': ['name'], 'verbose_name': 'Piece of furniture', 'verbose_name_plural': 'Furniture'},
        ),
        migrations.AddField(
            model_name='object',
            name='cas_id_number',
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name='Cas ID Number'),
        ),
        migrations.AddField(
            model_name='object',
            name='is_precursor',
            field=models.BooleanField(default=False, verbose_name='Is precursor'),
        ),
        migrations.AddField(
            model_name='object',
            name='molecular_formula',
            field=models.CharField(blank=True, max_length=255, null=True, validators=[laboratory.validators.validate_molecular_formula], verbose_name='Molecular formula'),
        ),
        migrations.AddField(
            model_name='object',
            name='security_sheet',
            field=models.FileField(blank=True, null=True, upload_to='security_sheets/', verbose_name='Security sheet'),
        ),
        migrations.CreateModel(
            name='Laboratory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Laboratory name')),
                ('rooms', models.ManyToManyField(blank=True, to='laboratory.LaboratoryRoom')),
              #  ('related_labs', models.ManyToManyField(blank=True, to='laboratory.Laboratory')),
               # ('lab_admins', models.ManyToManyField(blank=True, related_name='lab_admins', to=settings.AUTH_USER_MODEL)),
                ('laboratorists', models.ManyToManyField(blank=True, related_name='laboratorists', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Laboratories',
                'verbose_name': 'Laboratory',
            },
        ),
        migrations.CreateModel(
            name='FeedbackEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('explanation', models.TextField(blank=True, verbose_name='Explanation')),
                ('related_file', models.FileField(blank=True, upload_to='media/feedback_entries/', verbose_name='Related file')),
            ],
            options={
                'verbose_name_plural': 'Feedback entries',
                'verbose_name': 'Feedback entry',
            },
        ),
        migrations.AddField(
            model_name='object',
            name='imdg_code',
            field=models.CharField(blank=True, choices=[('1', 'Explosives'), ('2', 'Gases'), ('3', 'Flammable liquids'), ('4', 'Flammable solids'), ('5', 'Oxidizing substances and organic peroxides'), ('6', 'Toxic and infectious substances'), ('7', 'Radioactive material'), ('8', 'Corrosive substances'), ('9', 'Miscellaneous dangerous substances and articles')], max_length=1, null=True, verbose_name='IMDG code'),
        ),
        # migrations.RunPython(
        #     code=laboratory.migrations.0023_auto_20170504_1649.create_groups,
        # ),
        migrations.AddField(
            model_name='laboratory',
            name='students',
            field=models.ManyToManyField(blank=True, related_name='students', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='CLInventory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(verbose_name='Name')),
                ('cas_id_number', models.TextField(verbose_name='CAS ID number')),
                ('url', models.TextField(verbose_name='URL')),
            ],
            options={
                'verbose_name': 'C&L Inventory',
                'verbose_name_plural': 'C&L Inventory objects',
                'permissions': (('view_clinventory', 'Can see available C&L Inventory'),),
            },
        ),
        migrations.CreateModel(
            name='Solution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('solutes', models.TextField(verbose_name='Solutes')),
                ('volume', models.CharField(max_length=100, verbose_name='Volumen')),
                ('temperature', models.CharField(default='25 degC', max_length=100, verbose_name='Temperature')),
                ('pressure', models.CharField(default='1 atm', max_length=100, verbose_name='Pressure')),
                ('pH', models.IntegerField(default=7, verbose_name='pH')),
                ('name', models.CharField(default='', max_length=255, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Solution',
                'verbose_name_plural': 'Solutions',
                'permissions': (('view_solution', 'Can see available Solution'),),
            },
        ),
        migrations.CreateModel(
            name='OrganizationStructure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='auth.Group')),
                ('parent', mpttfields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                     related_name='children', to='laboratory.OrganizationStructure'
                                                     ) if mpttfields else models.ForeignKey(blank=True, null=True,
                    on_delete=django.db.models.deletion.CASCADE, related_name='children',
                    to='laboratory.OrganizationStructure')),
            ],
            options={
                'verbose_name': 'Organization',
                'verbose_name_plural': 'Organizations',
                'permissions': (('view_organizationstructure', 'Can see available OrganizationStructure'),),
            },
        ),
        migrations.CreateModel(
            name='PrincipalTechnician',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('phone_number', models.CharField(default='', max_length=25, verbose_name='Phone')),
                ('id_card', models.CharField(max_length=100, verbose_name='ID Card')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email address')),
            ],
        ),
        migrations.AddField(
            model_name='laboratory',
            name='geolocation',
            field=location_field.models.plain.PlainLocationField(default='9.895804362670006,-84.1552734375', max_length=63),
        ),
        migrations.AddField(
            model_name='laboratory',
            name='location',
            field=models.CharField(default='', max_length=255, verbose_name='Location'),
        ),
        migrations.AddField(
            model_name='laboratory',
            name='phone_number',
            field=models.CharField(default='', max_length=25, verbose_name='Phone'),
        ),
        migrations.AlterField(
            model_name='laboratory',
            name='name',
            field=models.CharField(default='', max_length=255, verbose_name='Laboratory name'),
        ),
        migrations.AddField(
            model_name='principaltechnician',
            name='assigned',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='laboratory.Laboratory'),
        ),
        migrations.AddField(
            model_name='principaltechnician',
            name='credentials',
            field=models.ManyToManyField(to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='principaltechnician',
            name='organization',
            field=mpttfields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='laboratory.OrganizationStructure') if mpttfields else models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, blank=True, null=True,  to='laboratory.OrganizationStructure'),
        ),
        migrations.AddField(
            model_name='laboratory',
            name='organization',
            field=mpttfields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='laboratory.OrganizationStructure') if mpttfields else models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, blank=True, null=True,  to='laboratory.OrganizationStructure'),
        ),
        migrations.AlterModelOptions(
            name='feedbackentry',
            options={'permissions': (('view_feedbackentry', 'Can see available feed back entry'),), 'verbose_name': 'Feedback entry', 'verbose_name_plural': 'Feedback entries'},
        ),
        migrations.AlterModelOptions(
            name='furniture',
            options={'ordering': ['name'], 'permissions': (('view_furniture', 'Can see available Furniture'),), 'verbose_name': 'Piece of furniture', 'verbose_name_plural': 'Furniture'},
        ),
        migrations.AlterModelOptions(
            name='laboratory',
            options={'permissions': (('view_laboratory', 'Can see available laboratory'),), 'verbose_name': 'Laboratory', 'verbose_name_plural': 'Laboratories'},
        ),
        migrations.AlterModelOptions(
            name='laboratoryroom',
            options={'permissions': (('view_laboratoryroom', 'Can see available laboratory Room'),), 'verbose_name': 'Laboratory Room', 'verbose_name_plural': 'Laboratory Rooms'},
        ),
        migrations.AlterModelOptions(
            name='object',
            options={'permissions': (('view_object', 'Can see available object'),), 'verbose_name': 'Object', 'verbose_name_plural': 'Objects'},
        ),
        migrations.AlterModelOptions(
            name='objectfeatures',
            options={'permissions': (('view_objectfeatures', 'Can see available objectfeatures'),), 'verbose_name': 'Object feature', 'verbose_name_plural': 'Object features'},
        ),
        migrations.AlterModelOptions(
            name='principaltechnician',
            options={'permissions': (('view_principaltechnician', 'Can see available PrincipalTechnician'),)},
        ),
        migrations.AlterModelOptions(
            name='shelf',
            options={'permissions': (('view_shelf', 'Can see available shelf'),), 'verbose_name': 'Shelf', 'verbose_name_plural': 'Shelves'},
        ),
        migrations.AlterModelOptions(
            name='shelfobject',
            options={'permissions': (('view_shelfobject', 'Can see available shelf objects'),), 'verbose_name': 'Shelf object', 'verbose_name_plural': 'Shelf objects'},
        ),
        # migrations.RemoveField(
        #     model_name='laboratory',
        #     name='lab_admins',
        # ),
        migrations.AlterField(
            model_name='principaltechnician',
            name='email',
            field=models.EmailField(max_length=254, verbose_name='Email address'),
        ),
        # migrations.RunPython(
        #     code=laboratory.migrations.0034_group_perms.load_group_perms,
        # ),
        # migrations.RemoveField(
        #     model_name='laboratory',
        #     name='related_labs',
        # ),
        migrations.AlterField(
            model_name='laboratory',
            name='organization',
            field=mpttfields.TreeForeignKey(on_delete=django.db.models.deletion.CASCADE, to='laboratory.OrganizationStructure') if mpttfields else models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,  to='laboratory.OrganizationStructure'),
        ),
        migrations.DeleteModel(
            name='FeedbackEntry',
        ),
        migrations.AddField(
            model_name='object',
            name='model',
            field=models.CharField(blank=True, max_length=50, null=True, verbose_name='Model'),
        ),
        migrations.AddField(
            model_name='object',
            name='plaque',
            field=models.CharField(blank=True, max_length=50, null=True, verbose_name='Plaque'),
        ),
        migrations.AddField(
            model_name='object',
            name='serie',
            field=models.CharField(blank=True, max_length=50, null=True, verbose_name='Serie'),
        ),
        migrations.AlterModelOptions(
            name='principaltechnician',
            options={'ordering': ['name'], 'permissions': (('view_principaltechnician', 'Can see available PrincipalTechnician'),), 'verbose_name': 'Principal Technician', 'verbose_name_plural': 'Principal Technicians'},
        ),
        migrations.AlterField(
            model_name='laboratory',
            name='laboratorists',
            field=models.ManyToManyField(blank=True, related_name='laboratorists', to=settings.AUTH_USER_MODEL, verbose_name='Laboratorists'),
        ),
        migrations.AlterField(
            model_name='laboratory',
            name='organization',
            field=mpttfields.TreeForeignKey(on_delete=django.db.models.deletion.CASCADE, to='laboratory.OrganizationStructure', verbose_name='Organization') if mpttfields else models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, verbose_name='Organization',  to='laboratory.OrganizationStructure'),
        ),
        migrations.AlterField(
            model_name='laboratory',
            name='rooms',
            field=models.ManyToManyField(blank=True, to='laboratory.LaboratoryRoom', verbose_name='Rooms'),
        ),
        migrations.AlterField(
            model_name='laboratory',
            name='students',
            field=models.ManyToManyField(blank=True, related_name='students', to=settings.AUTH_USER_MODEL, verbose_name='Students'),
        ),
        migrations.AlterField(
            model_name='object',
            name='features',
            field=models.ManyToManyField(to='laboratory.ObjectFeatures', verbose_name='Object features'),
        ),
        migrations.AlterField(
            model_name='organizationstructure',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='auth.Group', verbose_name='Group'),
        ),
        migrations.AlterField(
            model_name='organizationstructure',
            name='parent',
            field=mpttfields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='laboratory.OrganizationStructure', verbose_name='Parent') if mpttfields else models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, verbose_name='Parent', blank=True, null=True, related_name='children', to='laboratory.OrganizationStructure'),
        ),
        migrations.AlterField(
            model_name='principaltechnician',
            name='assigned',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='laboratory.Laboratory', verbose_name='Assigned to'),
        ),
        migrations.AlterField(
            model_name='principaltechnician',
            name='organization',
            field=mpttfields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='laboratory.OrganizationStructure', verbose_name='Organization') if mpttfields else models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, verbose_name='Organization', blank=True, null=True, to='laboratory.OrganizationStructure'),
        ),
        migrations.AlterField(
            model_name='shelf',
            name='furniture',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='laboratory.Furniture', verbose_name='Furniture'),
        ),
        migrations.AlterField(
            model_name='shelf',
            name='name',
            field=models.CharField(default='nd', max_length=15, verbose_name='Name'),
        ),
        migrations.AlterField(
            model_name='shelfobject',
            name='object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='laboratory.Object', verbose_name='Equipment or reactive or sustance'),
        ),
        migrations.AlterField(
            model_name='shelfobject',
            name='shelf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='laboratory.Shelf', verbose_name='Shelf'),
        ),
        migrations.AlterField(
            model_name='shelf',
            name='container_shelf',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='laboratory.Shelf', verbose_name='Container shelf'),
        ),
        migrations.AlterField(
            model_name='objectfeatures',
            name='name',
            field=models.CharField(max_length=250, unique=True, verbose_name='Name'),
        ),
        migrations.AlterModelOptions(
            name='laboratory',
            options={'permissions': (('view_laboratory', 'Can see available laboratory'), ('view_report', 'Can see available reports'), ('do_report', 'Can download available reports')), 'verbose_name': 'Laboratory', 'verbose_name_plural': 'Laboratories'},
        ),
        migrations.AlterField(
            model_name='organizationstructure',
            name='level',
            field=models.PositiveIntegerField(editable=False),
        ),
        migrations.AlterField(
            model_name='organizationstructure',
            name='lft',
            field=models.PositiveIntegerField(editable=False),
        ),
        migrations.AlterField(
            model_name='organizationstructure',
            name='rght',
            field=models.PositiveIntegerField(editable=False),
        ),
        migrations.AddField(
            model_name='object',
            name='h_code',
            field=models.ManyToManyField(blank=True, to='sga.DangerIndication', verbose_name='Danger Indication'),
        ),
        migrations.AlterField(
            model_name='object',
            name='imdg_code',
            field=models.CharField(blank=True, choices=[('1', 'Explosives'), ('2', 'Gases'), ('3', 'Flammable liquids'), ('4', 'Flammable solids'), ('5', 'Oxidizing substances and organic peroxides'), ('6', 'Toxic and infectious substances'), ('7', 'Radioactive material'), ('8', 'Corrosive substances'), ('9', 'Miscellaneous dangerous substances and articles')], help_text='* Eliminado en la próxima versión', max_length=1, null=True, verbose_name='IMDG code'),
        ),
        migrations.AlterField(
            model_name='shelfobject',
            name='measurement_unit',
            field=models.CharField(choices=[('0', 'Meters'), ('1', 'Milimeters'), ('2', 'Centimeters'), ('3', 'Liters'), ('4', 'Mililiters'), ('5', 'Unit'), ('6', 'Gram'), ('7', 'Kilogram'), ('8', 'Miligram'), ('9', 'Cubic Meter')], max_length=2, verbose_name='Measurement unit'),
        ),
        migrations.AddField(
            model_name='object',
            name='is_public',
            field=models.BooleanField(default=True, verbose_name='Share with others'),
        ),
        migrations.AddField(
            model_name='object',
            name='laboratory',
            field=models.ManyToManyField(blank=True, to='laboratory.Laboratory'),
        ),
        migrations.AlterField(
            model_name='organizationstructure',
            name='level',
            field=models.PositiveIntegerField(db_index=True, editable=False),
        ),
        migrations.AlterField(
            model_name='organizationstructure',
            name='lft',
            field=models.PositiveIntegerField(db_index=True, editable=False),
        ),
        migrations.AlterField(
            model_name='organizationstructure',
            name='rght',
            field=models.PositiveIntegerField(db_index=True, editable=False),
        ),
        migrations.AlterField(
            model_name='organizationstructure',
            name='level',
            field=models.PositiveIntegerField(editable=False),
        ),
        migrations.AlterField(
            model_name='organizationstructure',
            name='lft',
            field=models.PositiveIntegerField(editable=False),
        ),
        migrations.AlterField(
            model_name='organizationstructure',
            name='rght',
            field=models.PositiveIntegerField(editable=False),
        ),
        migrations.RunPython(create_groups),
        migrations.RunPython(load_group_perms),
    ]
